#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04
    permissions:
      contents: write
    env:
      targets: ${{ matrix.targets }}
    strategy:
      matrix:
        include:
          - targets: "mi-mini"
          - targets: "rm2100"

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq -y update  
        sudo -E apt-get -qq -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
                                  bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
                                  git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
                                  libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
                                  mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
                                  libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
                                  vim wget xmlto xxd zlib1g-dev python3-setuptools libfuse-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        echo 'src-git kenzo https://github.com/kenzok8/openwrt-packages' >>openwrt/feeds.conf.default
        echo 'src-git small https://github.com/kenzok8/small' >>openwrt/feeds.conf.default

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: |
        cd openwrt && ./scripts/feeds install -a
        sed -i 's/PKG_BUILD_FLAGS:=no-mips16/PKG_USE_MIPS16:=0/' feeds/packages/net/frp/Makefile

    - name: Load custom configuration
      run: |
        if [[ "${targets}"="mi-mini" && -e mi-mini.config ]]; then
          mv mi-mini.config openwrt/.config
          sed -i 's/192.168.1.1/192.168.1.4/g' openwrt/package/base-files/files/bin/config_generate
        elif [[ "${targets}"="rm2100" && -e rm2100.config ]]; then
          mv rm2100.config openwrt/.config
          sed -i 's/192.168.1.1/192.168.1.3/g' openwrt/package/base-files/files/bin/config_generate
        fi
        sed -i "s/option bbr_cca '0'/option bbr_cca '1'/g" openwrt/package/feeds/luci/luci-app-turboacc/root/etc/config/turboacc >>/dev/null
        sed -i 's/root:::0:99999:7:::/root:$1$OR/e/lZS$5uicyTzUtJmk2Bqbqc.g3.:19633:0:99999:7:::' openwrt/package/base-files/files/etc/passwd >>/dev/null
        sed -i 's/root:::0:99999:7:::/root:$1$OR/e/lZS$5uicyTzUtJmk2Bqbqc.g3.:19633:0:99999:7:::' openwrt/package/base-files/files/etc/shadow >>/dev/null
        sed -i 's/set wireless.default_radio${devidx}.encryption=none/set wireless.default_radio${devidx}.encryption=psk-mixed' >>/dev/null
        sed -i '/default_radio${devidx}.encryption/a \                        set wireless.default_radio${devidx}.key=mn5e2kmg\n                        set wireless.default_radio${devidx}.ieee80211k=1\n                        set wireless.default_radio${devidx}.ieee80211v=1' openwrt/package/kernel/mac80211/files/lib/wifi/mac80211.sh >>/dev/null
        echo "------------------检查配置----------------------------"
        cat openwrt/.config
        echo "------------------检查Turbo Acc配置----------------------------"
        cat openwrt/package/feeds/luci/luci-app-turboacc/root/etc/config/turboacc
        echo "------------------检查默认IP----------------------------"
        cat openwrt/package/base-files/files/bin/config_generate
        echo "------------------检查默认IP----------------------------"
        cat openwrt/package/kernel/mac80211/files/lib/wifi/mac80211.sh

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_OUTPUT
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ steps.compile.outputs.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ steps.compile.outputs.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: steps.organize.outputs.FIRMWARE
