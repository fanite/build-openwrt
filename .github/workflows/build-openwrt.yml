name: Build OpenWrt

on:
  workflow_dispatch:
    inputs:
      device:
        description: '要编译的设备型号'
        required: true
        default: 'RM2100'
        type: choice
        options:
          - RM2100
          - RM2100-MT
          - MI-MINI
          - PHICOMM-K3
      password:
        description: '登录密码和WiFi密码。'
        type: string
        default: 'password'
      gateway:
        description: '网关'
        type: string
        default: '192.168.1.1'
      upload_bin:
        description: '上传BIN文件夹'
        type: boolean
        default: true
      upload_firmware:
        description: '上传FIRMWARE文件夹'
        type: boolean
        default: true

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq -y update  
        sudo -E apt-get -qq -y install openssl ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
                                  bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
                                  git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
                                  libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
                                  mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
                                  libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
                                  vim wget xmlto xxd zlib1g-dev python3-setuptools libfuse-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        echo 'src-git kenzo https://github.com/kenzok8/openwrt-packages' >>openwrt/feeds.conf.default
        echo 'src-git small https://github.com/kenzok8/small' >>openwrt/feeds.conf.default

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: |
        cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        # 拷贝配置文件
        cp configs/${{inputs.device}}.config openwrt/.config

        # 修改ROOT密码
        passwd=$(openssl passwd -salt 'OR/e/lZS' ${{inputs.password}})
        sed -i "s/root:::0:99999:7:::/root:${ passwd }:19633:0:99999:7:::/g" openwrt/package/base-files/files/etc/passwd
        sed -i "s/root:::0:99999:7:::/root:${ passwd }:19633:0:99999:7:::/g" openwrt/package/base-files/files/etc/shadow

        # 修改网关
        gateway=${{inputs.gateway}}
        if [[ $gateway != "192.168.1.1" ]]; then
          sed -i 's/192.168.1/${gateway%.*}/g' openwrt/package/base-files/files/bin/config_generate
          sed -i 's/${gateway%.*}.1/${gateway}/g' openwrt/package/base-files/files/bin/config_generate
        fi

        # 默认开启Turboacc的BBR
        if grep -q "^CONFIG_TARGET.*DEVICE.*=y" $PWD/.config;then sed -i "s/option bbr_cca '0'/option bbr_cca '1'/g" openwrt/package/feeds/luci/luci-app-turboacc/root/etc/config/turboacc;fi

        # 修改WIFI配置
        sed -i 's/set wireless.default_radio${devidx}.encryption=none/set wireless.default_radio${devidx}.encryption=psk-mixed/g' openwrt/package/kernel/mac80211/files/lib/wifi/mac80211.sh
        sed -i '/default_radio${devidx}.encryption/a \                        set wireless.default_radio${devidx}.key=${{inputs.password}}\n                        set wireless.default_radio${devidx}.ieee80211k=1\n                        set wireless.default_radio${devidx}.ieee80211v=1' openwrt/package/kernel/mac80211/files/lib/wifi/mac80211.sh

        if [[ ${{inputs.device}} == "PHICOMM-K3" ]]; then
          # 替换WIFI驱动
          cp -f files/brcmfmac4366c-pcie.bin.69027 openwrt/package/lean/k3-brcmfmac4366c-firmware/files/lib/firmware/brcm/brcmfmac4366c-pcie.bin
          # 添加lwz322的K3屏幕插件
          rm -rf openwrt/package/lean/luci-app-k3screenctrl
          git clone https://github.com/yangxu52/luci-app-k3screenctrl.git openwrt/package/lean/luci-app-k3screenctrl
          # 替换lwz322的K3屏幕驱动插件
          rm -rf openwrt/package/lean/k3screenctrl
          git clone https://github.com/yangxu52/k3screenctrl_build.git openwrt/package/lean/k3screenctrl/
          sed -i 's/k3screenctrl$/k3screenctrl luci-app-k3screenctrl/' openwrt/target/linux/bcm53xx/image/Makefile
        fi

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_OUTPUT
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_OUTPUT

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && inputs.upload_bin
      with:
        name: OpenWrt_bin${{ steps.compile.outputs.DEVICE_NAME }}${{ steps.compile.outputs.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: inputs.upload_firmware && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ steps.compile.outputs.DEVICE_NAME }}${{ steps.compile.outputs.FILE_DATE }}
        path: ${{ steps.organize.outputs.FIRMWARE }}
